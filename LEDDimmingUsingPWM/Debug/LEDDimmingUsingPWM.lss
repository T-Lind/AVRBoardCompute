
LEDDimmingUsingPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00804000  00804000  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000462a  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003089  00000000  00000000  00004abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b87  00000000  00000000  00007b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000086d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c2e  00000000  00000000  00008820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018c  00000000  00000000  0000a44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000a5da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_clear_bss>:
  f4:	20 e4       	ldi	r18, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 8b 00 	call	0x116	; 0x116 <main>
 108:	0c 94 4a 01 	jmp	0x294	; 0x294 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 110:	0e 94 2f 01 	call	0x25e	; 0x25e <system_init>
 114:	08 95       	ret

00000116 <main>:
uint32_t dutyCycle = 0;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 116:	0e 94 88 00 	call	0x110	; 0x110 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		for(int i=0;i<TCA1.SINGLE.PER;i++) {
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	18 c0       	rjmp	.+48     	; 0x150 <main+0x3a>
			dutyCycle = i;
 120:	ac 01       	movw	r20, r24
 122:	09 2e       	mov	r0, r25
 124:	00 0c       	add	r0, r0
 126:	66 0b       	sbc	r22, r22
 128:	77 0b       	sbc	r23, r23
 12a:	40 93 00 40 	sts	0x4000, r20	; 0x804000 <__DATA_REGION_ORIGIN__>
 12e:	50 93 01 40 	sts	0x4001, r21	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 132:	60 93 02 40 	sts	0x4002, r22	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 136:	70 93 03 40 	sts	0x4003, r23	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
			TCA1.SINGLE.CMP2 = dutyCycle;
 13a:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <__TEXT_REGION_LENGTH__+0x7e0a6c>
 13e:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <__TEXT_REGION_LENGTH__+0x7e0a6d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	e9 ef       	ldi	r30, 0xF9	; 249
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x30>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x36>
 14c:	00 00       	nop
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();

	/* Replace with your application code */
	while (1) {
		for(int i=0;i<TCA1.SINGLE.PER;i++) {
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	20 91 66 0a 	lds	r18, 0x0A66	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
 154:	30 91 67 0a 	lds	r19, 0x0A67	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
 158:	82 17       	cp	r24, r18
 15a:	93 07       	cpc	r25, r19
 15c:	08 f3       	brcs	.-62     	; 0x120 <main+0xa>
			dutyCycle = i;
			TCA1.SINGLE.CMP2 = dutyCycle;
			_delay_ms(0.25);
		}
		
		for(int i=TCA1.SINGLE.PER-1;i>=0;i--) {
 15e:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
 162:	90 91 67 0a 	lds	r25, 0x0A67	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	18 c0       	rjmp	.+48     	; 0x19a <main+0x84>
			dutyCycle = i;
 16a:	ac 01       	movw	r20, r24
 16c:	09 2e       	mov	r0, r25
 16e:	00 0c       	add	r0, r0
 170:	66 0b       	sbc	r22, r22
 172:	77 0b       	sbc	r23, r23
 174:	40 93 00 40 	sts	0x4000, r20	; 0x804000 <__DATA_REGION_ORIGIN__>
 178:	50 93 01 40 	sts	0x4001, r21	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 17c:	60 93 02 40 	sts	0x4002, r22	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 180:	70 93 03 40 	sts	0x4003, r23	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
			TCA1.SINGLE.CMP2 = dutyCycle;
 184:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <__TEXT_REGION_LENGTH__+0x7e0a6c>
 188:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <__TEXT_REGION_LENGTH__+0x7e0a6d>
 18c:	e9 ef       	ldi	r30, 0xF9	; 249
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x7a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x80>
 196:	00 00       	nop
			dutyCycle = i;
			TCA1.SINGLE.CMP2 = dutyCycle;
			_delay_ms(0.25);
		}
		
		for(int i=TCA1.SINGLE.PER-1;i>=0;i--) {
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	99 23       	and	r25, r25
 19c:	34 f7       	brge	.-52     	; 0x16a <main+0x54>
 19e:	bd cf       	rjmp	.-134    	; 0x11a <main+0x4>

000001a0 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 1a0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret

000001ac <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1b4:	e8 2f       	mov	r30, r24
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e0 5f       	subi	r30, 0xF0	; 240
 1ba:	fb 4f       	sbci	r31, 0xFB	; 251
 1bc:	90 81       	ld	r25, Z
 1be:	98 60       	ori	r25, 0x08	; 8
 1c0:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	88 30       	cpi	r24, 0x08	; 8
 1c6:	b0 f3       	brcs	.-20     	; 0x1b4 <mcu_init+0x4>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1cc:	e8 2f       	mov	r30, r24
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	e0 5d       	subi	r30, 0xD0	; 208
 1d2:	fb 4f       	sbci	r31, 0xFB	; 251
 1d4:	90 81       	ld	r25, Z
 1d6:	98 60       	ori	r25, 0x08	; 8
 1d8:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	88 30       	cpi	r24, 0x08	; 8
 1de:	b0 f3       	brcs	.-20     	; 0x1cc <mcu_init+0x1c>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1e4:	e8 2f       	mov	r30, r24
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e0 5b       	subi	r30, 0xB0	; 176
 1ea:	fb 4f       	sbci	r31, 0xFB	; 251
 1ec:	90 81       	ld	r25, Z
 1ee:	98 60       	ori	r25, 0x08	; 8
 1f0:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	88 30       	cpi	r24, 0x08	; 8
 1f6:	b0 f3       	brcs	.-20     	; 0x1e4 <mcu_init+0x34>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 1fc:	e8 2f       	mov	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e0 59       	subi	r30, 0x90	; 144
 202:	fb 4f       	sbci	r31, 0xFB	; 251
 204:	90 81       	ld	r25, Z
 206:	98 60       	ori	r25, 0x08	; 8
 208:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	b0 f3       	brcs	.-20     	; 0x1fc <mcu_init+0x4c>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 c0       	rjmp	.+16     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 214:	e8 2f       	mov	r30, r24
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e0 57       	subi	r30, 0x70	; 112
 21a:	fb 4f       	sbci	r31, 0xFB	; 251
 21c:	90 81       	ld	r25, Z
 21e:	98 60       	ori	r25, 0x08	; 8
 220:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	88 30       	cpi	r24, 0x08	; 8
 226:	b0 f3       	brcs	.-20     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 c0       	rjmp	.+16     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 22c:	e8 2f       	mov	r30, r24
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e0 55       	subi	r30, 0x50	; 80
 232:	fb 4f       	sbci	r31, 0xFB	; 251
 234:	90 81       	ld	r25, Z
 236:	98 60       	ori	r25, 0x08	; 8
 238:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	b0 f3       	brcs	.-20     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 240:	08 95       	ret

00000242 <TIMER_0_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 242:	89 b1       	in	r24, 0x09	; 9
 244:	8f 7b       	andi	r24, 0xBF	; 191
 246:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	88 b9       	out	0x08, r24	; 8

	PC6_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= PORTMUX_TCA10_bm;
 24e:	e0 ee       	ldi	r30, 0xE0	; 224
 250:	f5 e0       	ldi	r31, 0x05	; 5
 252:	86 81       	ldd	r24, Z+6	; 0x06
 254:	88 60       	ori	r24, 0x08	; 8
 256:	86 83       	std	Z+6, r24	; 0x06

	TIMER_0_init();
 258:	0e 94 3e 01 	call	0x27c	; 0x27c <TIMER_0_init>
 25c:	08 95       	ret

0000025e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 25e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <mcu_init>

	CLKCTRL_init();
 262:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CLKCTRL_init>

	SLPCTRL_init();
 266:	0e 94 3c 01 	call	0x278	; 0x278 <SLPCTRL_init>

	CPUINT_init();
 26a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CPUINT_init>

	TIMER_0_initialization();
 26e:	0e 94 21 01 	call	0x242	; 0x242 <TIMER_0_initialization>

	BOD_init();
 272:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <BOD_init>
 276:	08 95       	ret

00000278 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret

0000027c <TIMER_0_init>:

	// TCA1.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA1.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA1.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 27c:	e0 e4       	ldi	r30, 0x40	; 64
 27e:	fa e0       	ldi	r31, 0x0A	; 10
 280:	83 e4       	ldi	r24, 0x43	; 67
 282:	81 83       	std	Z+1, r24	; 0x01
	// TCA1.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA1.SINGLE.PER = 0xfff; /* Period: 0xfff */
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	9f e0       	ldi	r25, 0x0F	; 15
 288:	86 a3       	std	Z+38, r24	; 0x26
 28a:	97 a3       	std	Z+39, r25	; 0x27

	TCA1.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc      /* System Clock */
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp    /* Module Enable: enabled */
	                    | 0 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: disabled */

	return 0;
}
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
